df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 50 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 1
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = TRUE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 500 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 1
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = TRUE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 500 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 1
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 50 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 1
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 5 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 1
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 5 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 50 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 500 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = FALSE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 500 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = TRUE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 50 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = TRUE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
n = 5 #Set sample size
M = 5000 #Number of experiments
beta0 = 1
beta1 = 0
sigma = 2 #Standard deviation of U, i.e. sigma
#Slope coefficient vector
slopevec = rep(0,M)
#Should we divide by standard errors?
divide_option = TRUE
#Monte Carlo
for (i in 1:M) {
#Generate data
Uvec = rnorm(n, mean = 0, sd = sigma)
Xvec = rnorm(n, mean = 0, sd = 2)
Yvec = beta0 + beta1 * Xvec + Uvec
#Run regressions
reg = lm(Yvec ~ Xvec)
se1 = sqrt(diag(vcov(reg)))[2]
#Save slope coefficient
if (divide_option) {
slopevec[i] = (reg$coefficients[2] - beta1) / se1 + beta1
} else {
slopevec[i] = reg$coefficients[2]
}
}
#Plot the simulation results with overlaid t density and Gaussian density
if (divide_option){
hist(slopevec, main = paste("Histogram of
t values with n =",
toString(n)),
breaks = ceiling(M**(2/5)),
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
} else {
hist(slopevec, main = paste("Histogram of
beta1 estimates with n =",
toString(n)),
breaks = 20,
xlim = c(beta1 - 3, beta1 + 3), freq = FALSE, ylim = c(0, dnorm(0) + 0.05))
}
df = n - 2
curve(dt(x - beta1, df = df), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "blue")
curve(dnorm(x - beta1), from = beta1 - 4, to = beta1 + 4, add = TRUE, col = "red")
legend(-2, 0.3, legend=c(paste("t distribution with n =",
toString(n)), "Normal distribution"),
col=c("blue", "red"), lty=1, cex=1.2)
Xvec = c(7,6,4,5,3,5)
Sx_sq = var(Xvec)
print(Sx_sq * (n-1))
n
Xvec = c(7,6,4,5,3,5)
Sx_sq = var(Xvec)
print(Sx_sq * (6-1))
reg = lm(log(salary) ~ log(sales), data = ceosal1)
stargazer(reg)
stargazer(reg, type = "text")
10e3
